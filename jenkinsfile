pipeline{
    
    agent any
    environment{
        appName = "smbackend"
        projectPath = "/var/lib/jenkins/workspace/DockerSMB"
  
    }
    stages{
        stage('Verify tooling'){
            steps{
                sh '''
                    docker info
                    docker version
                    docker-compose version
                    curl --version
                '''
            }
        }
        stage('SCM') {
            steps{
                git branch: 'feature/fix-docker', url: 'https://github.com/City-of-Turku/smbackend.git'
            }
        }
        stage('Build Image'){
            steps{
                script{
                    postgresImage = docker.build 'postgres'
                    smbackendImage = docker.build 'smbackend'
                }
            }
        }
        
        stage('Check Lint'){
            steps {
                sh 'docker run --rm smbackend flake8'
            }
        }
        /*
        stage('Test test'){
            steps{
                sh 'docker run -v $projectPath --rm  --network="host" --env-file=config_dev.env  smbackend pytest --junitxml=reports/results.xml'
            }
        }
        */
       
        stage('Run Tests'){
            steps{
                //sh 'docker rm smbackend'
                //sh 'docker create --name smbackend smbackend'
                //sh 'docker run -t -d --name smbackend'
                sh 'docker rm -f smbackend || true'
                sh 'docker run -u root -v $projectPath/reports:/app/reports --network="host" --env-file=config_dev.env --name smbackend smbackend "coverage run -m pytest --verbose --junit-xml=results.xml"'   

                sh 'docker start smbackend'

                sh 'docker cp smbackend:/smbackend/results.xml $WORKSPACE/results.xml'
                
                sh 'cat $WORKSPACE/results.xml'
                //sh 'docker stop smbackend'
                //sh 'docker rm smbackend'
            }
            post {
                always {
                    // Archive unit tests for the future
                    junit allowEmptyResults: true, testResults: 'results.xml'
                }
            }
            
        }
        
        stage('Calculate Coverage'){
            steps {
                echo 'Code Coverage'
                sh 'docker rm -f smbackend || true'
                sh 'docker run -u root -v $projectPath --network="host" --env-file=config_dev.env  --name smbackend smbackend "pytest --cov . --cov-report=html:coverage/html"'
                
                //sh 'docker run -u root -v $projectPath --network="host" --env-file=config_dev.env  --name smbackend smbackend "coverage xml -i -o coverage.xml"'
                //sh 'docker run -u root -v $projectPath/reports:/app/reports --network="host" --env-file=config_dev.env  --name smbackend smbackend "ls"'

                sh 'docker start smbackend'
                sh 'docker run smbackend ls'
                sh 'docker run smbackend pwd'

                sh 'mkdir -p $WORKSPACE/coverage'
                sh 'docker cp smbackend:/smbackend/coverage/. $WORKSPACE/coverage/'

//                sh 'docker cp smbackend:/smbackend/coverage.xml $WORKSPACE/coverage.xml'
                sh 'cat $WORKSPACE/coverage/html/index.html'
            }
            post{
                always{
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'coverage', reportFiles: 'html/index.html', reportName: 'SMBACKEND Coverage Report', reportTitles: 'Test title'])
                }
                    
            }
          
        }
     
        
    }
}